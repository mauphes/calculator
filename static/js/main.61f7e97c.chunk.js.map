{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","type","e","setState","defineProperty","target","value","addProduct","error","_this$state","state","products","name","price","push","parseInt","calcDiscount","_this$state2","allowDiscount","discountSum","length","prices","map","_ref","sum","reduce","num","discountPercent","expensiveProductPrice","Math","max","apply","toConsumableArray","flag","product","discountPrice","roundPrice","ceil","expensive","i","el","discount","_this2","_this$state3","react_default","a","createElement","className","htmlFor","id","onChange","bind","onClick","_ref2","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61f7e97c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      error: '',\n      name: '',\n      price: '',\n      discount: null,\n      allowDiscount: 0,\n    }\n  }\n\n  handleChange = (type, e) => {\n    this.setState({ [type]: e.target.value });\n  };\n\n  addProduct = () => {\n    let { products, name, price } = this.state, error;\n\n    if(!name) error = 'Не указано название продукта';\n    else if(!price) error = 'Не указана цена продукта';\n\n    if(error) this.setState({ error });\n    else {\n      products.push({ name, price: parseInt(price, 10) });\n      this.setState({ products, name: '', price: '', error: '' }, this.calcDiscount);\n    }\n  };\n\n  calcDiscount = () => {\n    let { products, allowDiscount } = this.state, discountSum = allowDiscount;\n    if(!!allowDiscount && products.length) {\n      const prices = products.map(({ price }) => price),\n        sum = prices.reduce((num, price) => num + price, 0),\n        discountPercent = allowDiscount / sum,\n        expensiveProductPrice = Math.max(...prices);\n      let flag = false;\n      products = products.map(product => {\n        const discountPrice = product.price - product.price * discountPercent;\n        if (!flag && (product.price === expensiveProductPrice)) {\n          //product.discountPrice = Math.floor(discountPrice);\n          product.expensive = true;\n          flag = true;\n        } else {\n          const roundPrice = Math.ceil(discountPrice);\n          discountSum += roundPrice;\n          product.discountPrice = roundPrice;\n        }\n        return product;\n      });\n      for (let i = 0; i < products.length; i++) {\n        const el = products[i];\n        if (el.expensive) {\n          delete el.expensive;\n          el.discountPrice = sum - discountSum;\n        }\n      }\n      this.setState({ products });\n    }\n  };\n\n  render() {\n    const { products, name, price, discount, error } = this.state;\n    return (\n      <div className=\"App\">\n        <h2>Добавить продукт</h2>\n        <div className=\"form\">\n          <div className=\"field_in_row\">\n            <label htmlFor=\"productName\">Продукт</label>\n            <input type=\"text\" id=\"productName\" value={name} onChange={this.handleChange.bind(this, 'name')}/>\n          </div>\n          <div className=\"field_in_row\">\n            <label htmlFor=\"productPrice\">Цена</label>\n            <input type=\"text\" id=\"productPrice\" value={price} onChange={this.handleChange.bind(this, 'price')}/>\n          </div>\n          <div className=\"field_in_row\">\n            <button onClick={this.addProduct}>Добавить</button>\n          </div>\n          {error && <div className=\"error\">{error}</div>}\n        </div>\n        <hr/>\n        <h3>Корзина</h3>\n        <table>\n          <thead>\n            <tr>\n              <td>Продукт</td>\n              <td>Цена</td>\n              <td>Цена со скидкой</td>\n            </tr>\n          </thead>\n          <tbody>\n          {products.map(({ name, price, discountPrice }, key) =>\n            <tr key={key}>\n              <td>{name}</td>\n              <td>{price}</td>\n              <td>{discountPrice}</td>\n            </tr>\n          )}\n          </tbody>\n        </table>\n        <div className=\"discountBlock\">\n          Применить скидку <input type=\"text\" value={discount || ''} onChange={this.handleChange.bind(this, 'discount')}/> рублей\n          &nbsp;<button onClick={() => this.setState({ allowDiscount: parseInt(discount, 10) }, this.calcDiscount)}>Применить</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}